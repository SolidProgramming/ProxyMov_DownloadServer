@if (Downloads is not null)
{
    <div class="container mt-5 text-center">
        @foreach (IGrouping<string, EpisodeDownloadModel> group in GetGroupedDownloads())
        {
            string seriesName = group.First().Download.Name;
            var seasonGroups = group.GroupBy(_ => _.Download.Season);
            <div class="d-inline-block me-2 mb-2">
                <HxBadge CssClass="px-3 pt-2 pb-2" Color="ThemeColor.Secondary">
                    <div class="d-block" style="min-width: 250px">
                        <h5>
                            <HxBadge CssClass="w-100 py-2" Type="BadgeType.RoundedPill" Color="ThemeColor.Warning">
                                <span class="pe-3 align-middle">@seriesName</span>
                                <HxIcon CssClass="text-danger float-end fs-5" Icon="BootstrapIcon.XCircle"></HxIcon>
                            </HxBadge>
                        </h5>
                        <div class="d-flex justify-content-center">
                            @foreach (IGrouping<int, EpisodeDownloadModel> group2 in seasonGroups)
                            {
                                <HxBadge style="font-size: 15px" CssClass="d-inline-block px-3 mx-1" Type="BadgeType.RoundedPill" Color="ThemeColor.Dark">
                                    <span class="pe-3">@($"S{group2.Key:D2}")</span>
                                    <HxIcon CssClass="text-danger float-end" Icon="BootstrapIcon.XCircle"></HxIcon>
                                </HxBadge>
                            }
                        </div>
                    </div>
                </HxBadge>
            </div>
        }
    </div>
}

@code {
    private List<EpisodeDownloadModel>? Downloads { get; set; } = [];
    private CronJobState CronJobState = CronJobState.WaitForNextCycle;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CronJob.CronJobEvent += CronJobEvent;
            CronJob.CronJobDownloadsEvent += CronJobDownloads;
        }
    }

    private void CronJobDownloads(int downloadCount, int languageDownloadCount)
    {
        Downloads = CronJob.DownloadQue?.ToList().Except(CronJob.SkippedDownloads).ToList();

        InvokeAsync(() => StateHasChanged());
    }

    private void CronJobEvent(CronJobState jobState)
    {
        CronJobState = CronJob.CronJobState;

        switch (jobState)
        {
            case CronJobState.WaitForNextCycle:
                Downloads = null;
                break;

            case CronJobState.Running:
                break;

            case CronJobState.CheckingForDownloads:
                break;
            default:
                break;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private IEnumerable<IGrouping<string, EpisodeDownloadModel>> GetGroupedDownloads()
    {
        return Downloads.GroupBy(_ => _.Download.Name).Take(5);
    }
}
