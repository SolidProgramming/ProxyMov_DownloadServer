﻿@using System.Globalization
@using Microsoft.Extensions.Options

@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject IOptions<RequestLocalizationOptions> RequestLocalizationOptions

@if (LangOptionModel is not null)
{
    <div class="mt-2 mb-2 text-center d-none d-md-block">
        <img class="d-inline" style="width: 38px; cursor: pointer;" src="img/german_dub.svg" @onclick="@(() => @OnSubmitLangOption("de"))">
        <img class="d-inline ms-1" style="width: 38px; cursor: pointer;" src="img/english_dub.svg" @onclick="@(() => @OnSubmitLangOption("en"))">
    </div>
}

@code {
    [CascadingParameter]
    public required HttpContext HttpContext { get; init; }

    protected override void OnInitialized()
    {
        if (LangOptionModel is null)
        {
            var options = RequestLocalizationOptions.Value;
            var lang = CultureInfo.CurrentUICulture.Name.Split('-').First();
            lang = options.SupportedUICultures?.Any(culture => culture.Name.Split('-').First() == lang) == true ? lang : options.DefaultRequestCulture.UICulture.Name;
            LangOptionModel = new() { Language = lang };
        }
    }

    [SupplyParameterFromForm]
    public LanguageOption? LangOptionModel { get; set; }

    public class LanguageOption
    {
        public required string Language { get; set; }
    }

    private async Task OnSubmitLangOption(string lang)
    {
        if (LangOptionModel is null) return;
        await this.I18nText.SetCurrentLanguageAsync(lang);
    }
}