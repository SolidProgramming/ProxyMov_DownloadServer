@using Routes = ProxyMov_DownloadServer.Misc.Routes;
@using Microsoft.AspNetCore.Components.Rendering
@using System.Net
@attribute [Route(Routes.Dashboard)]
@attribute [Route(Routes.Index)]
@inject IHxMessengerService ToastService
@inject ILogger<DashboardPage> DashboardLogger
@inject ILogger<CronJob> CronJobLogger
@inject IApiService ApiService
@inject IConverterService CS
@inject NavigationManager NavigationManager
@inject IHostApplicationLifetime AppLifetime
@inject IQuartzService QuartzService
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<PageTitle>Dashboard</PageTitle>

<HxModal ShowCloseButton="false" CloseOnEscape="false" Size="ModalSize.Large" @ref="DownloadPathModal" Centered="true">
    <BodyTemplate>
        <div class="container">
            <HxAlert Color="ThemeColor.Info" CssClass="mt-1">
                <HxIcon CssClass="pe-1" Icon="@BootstrapIcon.ExclamationCircleFill" />
                Du hast noch keinen Download Pfad angegeben! <br /><span class="ps-4">Bitte trage hier den Pfad ein wo die Dateien gespeichert werden sollen.</span>
            </HxAlert>
            @if (ShowDownloadPathError)
            {
                <HxAlert Color="ThemeColor.Danger" CssClass="mt-1">
                    <HxIcon CssClass="pe-1" Icon="@BootstrapIcon.ExclamationCircleFill" />
                    Du musst einen Download Pfad angeben!
                </HxAlert>
            }
            <div class="mt-4">
                <HxInputText @bind-Value="Settings.DownloadPath" Placeholder="C:\\Downloads"></HxInputText>
            </div>
            <div class="mt-4">
                <HxButton OnClick="SaveDownloadPath" Color="ThemeColor.Success" Icon="BootstrapIcon.Check" CssClass="w-100">Speichern</HxButton>
            </div>
        </div>
    </BodyTemplate>
</HxModal>
<div class="container-lg">
    <div class="d-none d-md-block mt-4">
        <div style="overflow-y: auto;">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Status</th>
                        <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Name</th>
                        <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">@LangText["Season"]</th>
                        <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Episode</th>
                        <th scope="col" class="text-center"></th>
                        <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">%</th>
                        <th scope="col" class="text-center text-warning" style="font-family: 'Roboto', sans-serif;">
                            <HxIcon Icon="BootstrapIcon.LightningChargeFill" />
                        </th>
                        <th scope="col" class="text-center text-info" style="font-family: 'Roboto', sans-serif;">ETA</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col" class="text-center"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="text-center align-middle" width="50">
                            @if (Download is not null)
                            {
                                bool hasStopMark = Download == CronJob.StopMarkDownload?.Download;

                                <HxButton OnClick="@(() => ToggleStopMark())" Color="@(hasStopMark ? ThemeColor.Info : ThemeColor.Secondary)" Icon="@(hasStopMark ? BootstrapIcon.FlagFill : BootstrapIcon.Flag)"></HxButton>
                            }
                        </td>
                        <td class="text-center align-middle" width="50">
                            @switch (ConverterState)
                            {
                                case ConverterState.Downloading:
                                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                                    break;
                                case ConverterState.Idle:
                                case ConverterState.Undefined:
                                    @if (CronJobState == CronJobState.WaitForNextCycle)
                                    {
                                        <HxIcon Icon="BootstrapIcon.Hourglass"></HxIcon>
                                    }
                                    else
                                    {
                                        <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                                    }
                                    break;
                                default:
                                    break;
                            }
                        </td>
                        <td class="text-center align-middle" width="500" style="font-family: 'Roboto', sans-serif;">
                            @if (Download is not null)
                            {
                                @Download.Name
                            }
                            else
                            {
                                <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                            }
                        </td>
                        <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                            @if (Download is not null)
                            {
                                @($"S{Download.Season:D2}")
                            }
                            else
                            {
                                <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                            }
                        </td>
                        <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                            @if (Download is not null)
                            {
                                @($"E{Download.Episode:D2}")
                            }
                            else
                            {
                                <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                            }
                        </td>
                        <td class="text-center align-middle" width="90">
                            @if (Download is not null)
                            {
                                <LanguageFlagComponent Languages="@Download.LanguageFlag"></LanguageFlagComponent>
                            }
                            else
                            {
                                <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                            }
                        </td>
                        <td class="text-center align-middle" width="220">
                            <HxProgress>
                                @if (ConvertProgress is not null)
                                {
                                    <HxProgressBar Value="ConvertProgress.ProgressPercent" Color="ThemeColor.Success" />
                                }
                                else
                                {
                                    <HxProgressBar Value="0" Color="ThemeColor.Success" />
                                }
                            </HxProgress>
                        </td>
                        <td class="text-center align-middle" width="70">
                            @if (ConvertProgress is not null)
                            {
                                @(GetAdjustedDownloadSpeed(ConvertProgress))
                            }
                            else
                            {
                                <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                            }
                        </td>
                        <td class="text-center align-middle" width="100" style="font-family: 'Roboto', sans-serif;">
                            @if (ConvertProgress is not null && SmoothedETA.TotalSeconds > 0)
                            {
                                @($"{SmoothedETA.Hours:00}:{SmoothedETA.Minutes:00}:{SmoothedETA.Seconds:00}")
                            }
                            else
                            {
                                <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                            }
                        </td>
                        <td class="text-center align-middle" width="50">
                            <HxButton Enabled="@(ConverterState == ConverterState.Downloading && StopConverterButtonEnabled)" Color="ThemeColor.Warning" Icon="BootstrapIcon.StopFill" OnClick="StopConverter"></HxButton>
                        </td>
                        <td class="text-center align-middle" width="50">
                            <HxButton OnClick="SkipDownload" Color="ThemeColor.Secondary" Enabled="@(ConverterState == ConverterState.Downloading)" Icon="BootstrapIcon.SkipForwardFill"></HxButton>
                        </td>
                        <td class="text-center align-middle" width="50">
                            <HxButton Spinner="CheckDownloadsButtonSpinner" Enabled="CheckDownloadsButtonEnabled" OnClick="CheckForDownloads" Color="ThemeColor.Success" Icon="BootstrapIcon.ArrowClockwise"></HxButton>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="d-sm-block d-md-none">
        <div class="row">
            <div class="col">
                <HxButton CssClass="w-100" Enabled="@(ConverterState == ConverterState.Downloading && StopConverterButtonEnabled)" Color="ThemeColor.Warning" Icon="BootstrapIcon.StopFill" OnClick="StopConverter"></HxButton>
            </div>
            <div class="col">
                <HxButton CssClass="w-100" OnClick="SkipDownload" Color="ThemeColor.Secondary" Enabled="@(ConverterState == ConverterState.Downloading)" Icon="BootstrapIcon.SkipForwardFill"></HxButton>
            </div>
            <div class="col">
                <HxButton CssClass="w-100" Spinner="CheckDownloadsButtonSpinner" Enabled="CheckDownloadsButtonEnabled" OnClick="CheckForDownloads" Color="ThemeColor.Success" Icon="BootstrapIcon.ArrowClockwise"></HxButton>
            </div>
        </div>
        <table class="table mt-2">
            <thead>
                <tr>
                    <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Status</th>
                    <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Name</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="text-center align-middle" width="50">
                        @switch (ConverterState)
                        {
                            case ConverterState.Downloading:
                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                                break;
                            case ConverterState.Idle:
                            case ConverterState.Undefined:
                                @if (CronJobState == CronJobState.WaitForNextCycle)
                                {
                                    <HxIcon Icon="BootstrapIcon.Hourglass"></HxIcon>
                                }
                                else
                                {
                                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                                }
                                break;
                            default:
                                break;
                        }
                    </td>
                    <td class="text-center align-middle" width="200" style="font-family: 'Roboto', sans-serif;">
                        @if (Download is not null)
                        {
                            @Download.Name
                        }
                        else
                        {
                            <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                        }
                    </td>
                </tr>
            </tbody>
        </table>
        <table class="table mt-3">
            <thead>
                <tr>
                    <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">@LangText["Season"]</th>
                    <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">Episode</th>
                    <th scope="col" class="text-center" style="font-family: 'Roboto', sans-serif;">%</th>
                    <th scope="col" class="text-center text-warning" style="font-family: 'Roboto', sans-serif;">
                        <HxIcon Icon="BootstrapIcon.LightningChargeFill" />
                    </th>
                    <th scope="col" class="text-center text-info" style="font-family: 'Roboto', sans-serif;">ETA</th>
                </tr>
            </thead>
            <tbody>
                <tr>

                    <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                        @if (Download is not null)
                        {
                            @($"S{Download.Season:D2}")
                        }
                        else
                        {
                            <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                        }
                    </td>
                    <td class="text-center align-middle" width="70" style="font-family: 'Roboto', sans-serif;">
                        @if (Download is not null)
                        {
                            @($"E{Download.Episode:D2}")
                        }
                        else
                        {
                            <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                        }
                    </td>
                    <td class="text-center align-middle" width="150">
                        <HxProgress>
                            @if (ConvertProgress is not null)
                            {
                                <HxProgressBar Value="ConvertProgress.ProgressPercent" Label="@(ConvertProgress.ProgressPercent + "%")" Color="ThemeColor.Success" />
                            }
                            else
                            {
                                <HxProgressBar Value="0" Color="ThemeColor.Success" />
                            }
                        </HxProgress>
                    </td>
                    <td class="text-center align-middle" width="70">
                        @if (ConvertProgress is not null)
                        {
                            @(GetAdjustedDownloadSpeed(ConvertProgress))
                        }
                        else
                        {
                            <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                        }
                    </td>
                    <td class="text-center align-middle" width="100" style="font-family: 'Roboto', sans-serif;">
                        @if (ConvertProgress is not null && SmoothedETA.TotalSeconds > 0)
                        {
                            @($"{SmoothedETA.Hours:00}:{SmoothedETA.Minutes:00}:{SmoothedETA.Seconds:00}")
                        }
                        else
                        {
                            <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                        }
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col d-flex justify-content-start">
            <h5 class="d-inline">
                <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Success">
                    <HxIcon Icon="BootstrapIcon.FileEarmarkPlus"></HxIcon>
                    @DownloadQueCount
                </HxBadge>
            </h5>
            <div class="align-middle ms-2">
                <h5 class="d-inline align-middle">
                    <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Secondary">
                        <HxIcon Icon="BootstrapIcon.Translate"></HxIcon>
                        @LanguageDownloadCount
                    </HxBadge>
                </h5>
            </div>
        </div>
        <div class="col d-flex justify-content-end">
            @if (NextCronJobCycle is not null)
            {
                <h5 class="d-inline align-middle">
                    <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Success">
                        <HxIcon Icon="BootstrapIcon.Clock"></HxIcon>
                        <span class="ms-2">
                            @($"{NextCronJobCyleTime}")
                        </span>
                    </HxBadge>

                </h5>
                <h5>
                    <HxBadge CssClass="ms-2" Type="BadgeType.RoundedPill" Color="ThemeColor.Secondary">
                        @if (!string.IsNullOrEmpty(TimeUntilCycleText))
                        {
                            <span>@TimeUntilCycleText</span>
                        }
                    </HxBadge>
                </h5>
            }
            else
            {
                <h5 class="d-inline align-middle">
                    <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Secondary">
                        <HxIcon Icon="BootstrapIcon.Clock"></HxIcon>
                        <HxIcon Icon="BootstrapIcon.Dash"></HxIcon>
                    </HxBadge>

                </h5>
                <h5>
                    <HxBadge CssClass="ms-2" Type="BadgeType.RoundedPill" Color="ThemeColor.Warning">
                        @LangText["NoAutostart"]
                    </HxBadge>
                </h5>
            }
        </div>
    </div>
    <DownloadSkipperComponent></DownloadSkipperComponent>
    <DownloadQueComponent OnDownloadSkippOrRemove="@OnDownloadSkipped"></DownloadQueComponent>
</div>


@code {
    private I18nText.Lang LangText = new();

    private HxModal? DownloadPathModal;

    private ConvertProgressModel? ConvertProgress;
    private DownloadModel? Download;
    private ConverterState ConverterState = ConverterState.Idle;
    private CronJobState CronJobState = CronJobState.WaitForNextCycle;
    private int StopAfterDownloadCount { get; set; } = 0;

    private CronJob? CronJob;

    private bool CheckDownloadsButtonEnabled { get; set; } = false;
    private bool CheckDownloadsButtonSpinner { get; set; } = false;

    private bool EditConverterSettingsButtonEnabled { get; set; } = true;

    private bool StopConverterButtonEnabled { get; set; } = false;

    private DateTime? NextCronJobCycle = default;
    private TimeOnly NextCronJobCyleTime;
    private System.Timers.Timer? TmNextCycle;
    private TimeSpan? TimeUntilCycle;
    private string? TimeUntilCycleText;

    private int DownloadQueCount;
    private int LanguageDownloadCount;

    private TimeSpan SmoothedETA { get; set; }

    private SettingsModel? Settings;
    private bool ShowDownloadPathError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LangText = await I18nText.GetTextTableAsync<I18nText.Lang>(this);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Settings = SettingsHelper.ReadSettings<SettingsModel>();

            if (Settings is not null && string.IsNullOrEmpty(Settings.DownloadPath))
            {
                await DownloadPathModal.ShowAsync();
                return;
            }

            CronJob.RemoveHandlers();

            ConverterState = ConverterService.GetConverterState();

            CronJob = new(CronJobLogger, ApiService, CS, AppLifetime, QuartzService);

            CronJob.CronJobEvent += CronJobEvent;
            CronJob.CronJobErrorEvent += CronJobErrorEvent;
            CronJob.CronJobDownloadsEvent += CronJobDownloads;
            ConverterService.ConvertProgressChanged += Converter_ConvertProgressChanged;
            ConverterService.ConverterStateChanged += Converter_ConverterStateChanged;

            if (TmNextCycle is null)
            {
                TmNextCycle = new()
                    {
                        AutoReset = true,
                        Interval = 1000
                    };

                TmNextCycle.Elapsed += RefreshCycleTime;
            }

            if (!TmNextCycle.Enabled)
            {
                TmNextCycle.Start();
            }

            SetDownloadCounters();
            HandleCronJobState();
        }

        //RenderHelper.ComponentSetRendered(base.ToString()!);
    }

    private void RefreshCycleTime(Object? source, System.Timers.ElapsedEventArgs e)
    {
        if (CronJob.NextRun is null)
            return;

        NextCronJobCycle = CronJob.NextRun.Value;
        NextCronJobCyleTime = TimeOnly.FromDateTime(NextCronJobCycle.Value);

        if (NextCronJobCycle < DateTime.Now.ToLocalTime())
        {
            TimeUntilCycle = new TimeSpan(0, 0, 0);
        }
        else
        {
            TimeUntilCycle = NextCronJobCycle?.Subtract(DateTime.Now.ToLocalTime());
        }

        TimeUntilCycleText = "";

        if (TimeUntilCycle?.Hours > 0)
        {
            TimeUntilCycleText = $"{TimeUntilCycle:hh} {LangText["Hours"]}";
        }

        if (TimeUntilCycle?.Minutes > 0)
        {
            TimeUntilCycleText += $" {TimeUntilCycle:mm} {LangText["Minutes"]}";
        }

        TimeUntilCycleText += $" {TimeUntilCycle:ss} {LangText["Seconds"]}";

        InvokeAsync(() => StateHasChanged());
    }

    private void MoveToConverterSettings()
    {
        NavigationManager.NavigateTo(Routes.ConverterSettings);
    }

    private void Converter_ConvertProgressChanged(ConvertProgressModel convertProgress)
    {
        ConvertProgress = convertProgress;

        if (SmoothedETA.TotalSeconds == 0)
        {
            SmoothedETA = ConvertProgress.ETA;
        }

        if (ConvertProgress.ETA.TotalSeconds < SmoothedETA.TotalSeconds)
        {
            SmoothedETA = ConvertProgress.ETA;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void CronJobDownloads(int downloadCount, int languageDownloadCount)
    {
        DownloadQueCount = downloadCount;
        LanguageDownloadCount = languageDownloadCount;

        InvokeAsync(() => StateHasChanged());
    }

    private void CronJobEvent(CronJobState jobState)
    {
        HandleCronJobState(jobState, true);
    }

    private void CronJobErrorEvent(MessageType messageType, string message)
    {
        CronJobLogger.LogInformation($"{DateTime.Now} | {message}");
        ToastService.AddMessage(message, messageType);
    }

    private void SetDownloadCounters()
    {
        DownloadQueCount = CronJob.DownloadCount;
        LanguageDownloadCount = CronJob.LanguageDownloadCount;
    }

    private void HandleCronJobState(CronJobState cronJobState = CronJobState.Undefined, bool fromEvent = false)
    {
        if (cronJobState == CronJobState.Undefined)
        {
            CronJobState = CronJob.CronJobState;
        }
        else
        {
            CronJobState = cronJobState;
        }

        Download = ConverterService.GetDownload();
        SetDownloadCounters();

        switch (CronJobState)
        {
            case CronJobState.WaitForNextCycle:
                CheckDownloadsButtonEnabled = true;
                CheckDownloadsButtonSpinner = false;
                StopConverterButtonEnabled = false;
                EditConverterSettingsButtonEnabled = true;
                break;

            case CronJobState.Running:
                CheckDownloadsButtonEnabled = false;
                CheckDownloadsButtonSpinner = false;
                StopConverterButtonEnabled = true;
                EditConverterSettingsButtonEnabled = false;
                break;

            case CronJobState.CheckingForDownloads:
                CheckDownloadsButtonEnabled = false;
                CheckDownloadsButtonSpinner = true;
                ToastService.AddMessage(InfoMessage.CheckingForDownloads, MessageType.Secondary);
                break;
            case CronJobState.Paused:
                NextCronJobCycle = default;
                break;
            default:
                break;
        }

        if (fromEvent)
        {
            InvokeAsync(() => StateHasChanged());
        }
        else
        {
            StateHasChanged();
        }
    }

    private void Converter_ConverterStateChanged(ConverterState state, DownloadModel? download)
    {
        ConverterState = state;

        switch (state)
        {
            case ConverterState.Downloading:
                if (download is null)
                {
                    DashboardLogger.LogWarning($"{DateTime.Now} | {WarningMessage.ConverterDownloadStateNoData}");
                }
                else
                {
                    Download = download;
                }
                break;
            case ConverterState.Idle:
                Download = default;
                ConvertProgress = default;
                break;
            case ConverterState.Undefined:
            default:
                return;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private async Task CheckForDownloads()
    {
        if (CronJob is null)
            CronJob = new(CronJobLogger, ApiService, CS, AppLifetime, QuartzService);


        if (QuartzService.IsCancelled())
        {
            QuartzService.StartJob();
        }
        else
        {
            await CronJob.CheckForNewDownloads();
        }
    }

    private async Task StopConverter()
    {
        if (CronJob is not null)
            await CronJob.Abort();

        ConverterService.Abort();

        QuartzService.CancelJob();

        NextCronJobCycle = null;
        // await InvokeAsync(() => StateHasChanged());
    }

    private void SkipDownload()
    {
        if (CronJobState != CronJobState.Running || ConverterState != ConverterState.Downloading)
            return;

        ConverterService.Abort(true);
    }

    private void OnDownloadSkipped(int newDownloadCount)
    {
        DownloadQueCount = newDownloadCount;
    }

    private string? GetAdjustedDownloadSpeed(ConvertProgressModel convertProgress)
    {
        if (convertProgress is null || convertProgress.KBytePerSecond <= 0)
            return default;

        string unit = "KB/s";
        double speed = convertProgress.KBytePerSecond;

        string speedFormatted = $"{speed:N0}";

        if (convertProgress.KBytePerSecond > 1024)
        {
            speed /= 1024;
            unit = "MB/s";

            speedFormatted = $"{speed:N2}";
        }

        return $"{speedFormatted} {unit}";
    }

    private async void SaveDownloadPath()
    {
        if (string.IsNullOrEmpty(Settings.DownloadPath))
        {
            ShowDownloadPathError = true;
            return;
        }

        ShowDownloadPathError = false;

        SettingsHelper.SaveSettings(Settings);

        await DownloadPathModal.HideAsync();
    }

    private void ToggleStopMark()
    {
        if (CronJob.StopMarkDownload is null)
        {
            CronJob.StopMarkDownload = new EpisodeDownloadModel();
        }

        CronJob.StopMarkDownload.HasStopMark = !CronJob.StopMarkDownload.HasStopMark;

        if (CronJob.StopMarkDownload.HasStopMark)
        {
            CronJob.StopMarkDownload = new EpisodeDownloadModel()
                {
                    Download = Download,
                    HasStopMark = CronJob.StopMarkDownload.HasStopMark
                };
            ToastService.AddMessage(InfoMessage.StopmarkSet, MessageType.Secondary);
        }
        else
        {
            CronJob.StopMarkDownload = default;
            ToastService.AddMessage(InfoMessage.StopmarkUnset, MessageType.Secondary);
        }
    }
}