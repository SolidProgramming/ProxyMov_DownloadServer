@using Routes = ProxyMov_DownloadServer.Misc.Routes;
@attribute [Route(Routes.Settings)]
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject IHxMessengerService ToastService
@using System.ComponentModel.DataAnnotations
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<PageTitle>@LangText["Settings"]</PageTitle>

<div class="container">
    <div class="row px-3 mt-2 py-2">
        <div class="col-6">
            <h5>@LangText["DownloadPath"]</h5>
            <HxInputText @bind-Value="DownloadPath" Placeholder="C:\\Downloads"></HxInputText>
        </div>
    </div>
    <EditForm Model="@DownloaderPreferences" OnValidSubmit="@(() => SavePreferences())">
        <DataAnnotationsValidator />
        <div class="row mt-3">
            <div class="col-sm-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Gear"></HxIcon>
                        <h5 class="d-inline px-2">@LangText["Generally"]</h5>
                    </div>
                    <label class="text-warning mt-2">@LangText["IntervalInMinutes"]</label>
                    <HxInputNumber InputSize="InputSize.Small" CssClass="mt-2" Decimals="0" TValue="int" @bind-Value="DownloaderPreferences.Interval" />
                </div>
            </div>
            <div class="col-sm-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.PlayFill"></HxIcon>
                        <h5 class="d-inline px-2">Start:</h5>
                    </div>
                    <HxCheckbox CssClass="mt-2" TextCssClass="text-warning" Inline="true" @bind-Value="DownloaderPreferences.AutoStart" Text=@LangText["AutostartDownloads"] />
                </div>
            </div>
            <div class="col-sm-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Telegram"></HxIcon>
                        <h5 class="d-inline px-2">Telegram:</h5>
                    </div>
                    <HxCheckbox CssClass="mt-2" TextCssClass="text-warning" Inline="true" @bind-Value="DownloaderPreferences.TelegramCaptchaNotification" Text=@LangText["TelegramNotifyOnCaptcha"] />
                </div>
            </div>
        </div>
        <div class="row p-2 pb-2">
            @if (ProxySettingsChanged)
            {
                <HxAlert Color="ThemeColor.Info" CssClass="mt-1">
                    <HxIcon CssClass="pe-1" Icon="@BootstrapIcon.ExclamationCircleFill" />
                    Damit die Proxy Einstellungen wirksam werden, bitte die Einstellungen speichern und den Server neustarten!
                </HxAlert>
            }            
            <div class="col-md-auto">
                <div class="px-3 py-2">
                    <div class="my-2">
                        <HxIcon CssClass="d-inline fs-5 text-primary" Icon="BootstrapIcon.Activity"></HxIcon>
                        <h5 class="d-inline px-2">Proxy:</h5>
                    </div>
                    <HxCheckbox CssClass="mt-2" TextCssClass="d-inline text-warning" Inline="true" @oninput="OnProxySettingsChanged" @bind-Value="DownloaderPreferences.UseProxy" Text=@LangText["UseProxy"] />
                </div>
            </div>
            <div class="col mt-3">
                <label class="text-warning my-2">@LangText["ProxyAddress"]</label>
                <HxInputText Enabled=DownloaderPreferences.UseProxy Placeholder="p.webshare.io" @oninput="OnProxySettingsChanged" InputSize="InputSize.Small" @bind-Value="DownloaderPreferences.ProxyUri" />
            </div>
            <div class="col mt-3">
                <label class="text-warning my-2">@LangText["ProxyUsername"]</label>
                <HxInputText Enabled=DownloaderPreferences.UseProxy InputSize="InputSize.Small" @oninput="OnProxySettingsChanged" @bind-Value="DownloaderPreferences.ProxyUsername" />
            </div>
            <div class="col mt-3">
                <label class="text-warning my-2">@LangText["ProxyPassword"]</label>
                <HxInputText Enabled=DownloaderPreferences.UseProxy Type="InputType.Password" @oninput="OnProxySettingsChanged" InputSize="InputSize.Small" @bind-Value="DownloaderPreferences.ProxyPassword" />
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-6">
                <HxSubmit Color="ThemeColor.Success" Icon="BootstrapIcon.Check" CssClass="w-100">@LangText["Save"]</HxSubmit>
            </div>
            <div class="col-6">
                <HxButton Outline="true" Color="ThemeColor.Warning" Icon="BootstrapIcon.XCircle" CssClass="w-100" OnClick="NavigateBack">@LangText["Cancel"]</HxButton>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private I18nText.Lang LangText = new();

    private bool ProxySettingsChanged { get; set; }
    private string? DownloadPath { get; set; }
    private DownloaderPreferencesModel? DownloaderPreferences = new();

    protected override async Task OnInitializedAsync()
    {
        LangText = await I18nText.GetTextTableAsync<I18nText.Lang>(this);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            DownloaderPreferences = await ApiService.GetAsync<DownloaderPreferencesModel?>("getDownloaderPreferences");

            if (DownloaderPreferences is null)
            {
                ToastService.AddMessage(ErrorMessage.RetrieveDownloaderPreferencesFail, MessageType.Error);
                NavigateBack();
                return;
            }

            SettingsModel? settings = SettingsHelper.ReadSettings<SettingsModel>();

            if (settings is null || string.IsNullOrEmpty(settings.DownloadPath))
            {
                ToastService.AddMessage(ErrorMessage.RetrieveDownloaderPreferencesFail, MessageType.Error);
                return;
            }

            DownloadPath = settings.DownloadPath;

            StateHasChanged();
        }
    }

    private async Task SavePreferences()
    {
        bool success = await ApiService.SetDownloaderPreferences(DownloaderPreferences);

        if (!success)
        {
            ToastService.AddMessage(ErrorMessage.DownloaderPreferencesSaveFail, MessageType.Error);
            return;
        }

        SettingsModel? settings = SettingsHelper.ReadSettings<SettingsModel>();

        settings.DownloadPath = DownloadPath;

        SettingsHelper.SaveSettings(settings);

        ToastService.AddMessage(InfoMessage.DownloaderPreferencesSaved, MessageType.Success);

        await Task.Delay(1000);

        NavigateBack();
    }

    private void OnProxySettingsChanged()
    {       
        ProxySettingsChanged = true;
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(Routes.Dashboard);
    }
}
