@using Updater.Interfaces
@using Updater.Models
@inject IUpdateService UpdateService

@if (UpdateInProgress)
{
    <HxProgress Height="3">
        <HxProgressBar Value="UpdateProgress" Color="ThemeColor.Success" />
    </HxProgress>
    <div class="text-center text-success mt-2">
        <h5>@($"{UpdateProgress:F0}%")</h5>
    </div>
}

@if (!UpdateDownloadFinished)
{
    <div class="p-3">
        @if (CheckingForUpdates)
        {
            <div class="text-center">
                <HxSpinner CssClass="align-middle" Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                <h6 class="text-secondary align-middle ms-2 d-inline">Updates prüfen...</h6>
            </div>
        }
        else
        {
            @if (UpdateAvailable)
            {
                <div class="text-center">
                    @if (!UpdateInProgress)
                    {
                        <h6 class="text-warning me-2 align-middle d-inline">Es ist ein neues Update verfügbar!</h6>
                        <HxButton Icon="BootstrapIcon.FileEarmarkZip" Size="ButtonSize.Small" CssClass="me-2 align-middle d-inline" Color="ThemeColor.Success" OnClick="DownloadUpdate">Update</HxButton>
                        <a target="_blank" href="@UpdateDetails.Changelog">
                            <HxButton Icon="BootstrapIcon.FileTextFill" Size="ButtonSize.Small" CssClass="align-middle d-inline" Color="ThemeColor.Secondary">Patchnotes</HxButton>
                        </a>
                    }
                    else
                    {
                        <HxSpinner CssClass="align-middle me-2" Color="ThemeColor.Secondary" Size="SpinnerSize.Small"></HxSpinner>
                        <h6 class="text-secondary align-middle d-inline">Updates laden...</h6>
                    }
                </div>
            }
        }
    </div>
}
else
{
    <div class="p-3 mb-4 text-center">
        <HxButton OnClick="InstallUpdate" Icon="BootstrapIcon.Dropbox" Size="ButtonSize.Small" CssClass="me-2 align-middle d-inline" Color="ThemeColor.Success">Update installieren</HxButton>
    </div>
}

@if (ForceDownloadButton && !UpdateDownloadFinished && !CheckingForUpdates)
{
    <div class="text-center">
        <HxButton OnClick="DownloadUpdate" Size="ButtonSize.Small" Color="ThemeColor.Warning">Force Update</HxButton>
    </div>
}

@code {
    [Parameter]
    public bool ForceDownloadButton { get; set; }

    private bool CheckingForUpdates { get; set; }
    private bool UpdateAvailable { get; set; }
    private bool UpdateInProgress { get; set; }
    private bool UpdateDownloadFinished { get; set; }
    private UpdateDetailsModel? UpdateDetails;

    private float UpdateProgress = 0f;

    protected override void OnInitialized()
    {
        UpdateService.OnUpdateCheckStarted += OnUpdateCheckStarted;
        UpdateService.OnUpdateCheckFinished += OnUpdateCheckFinished;
    }

    private void OnUpdateCheckStarted(object? sender, EventArgs e)
    {
        CheckingForUpdates = true;

        InvokeAsync(() => StateHasChanged());
    }

    private void OnUpdateCheckFinished(object? sender, (bool UpdateAvailable, UpdateDetailsModel? UpdateDetails) e)
    {
        UpdateAvailable = e.UpdateAvailable;
        UpdateDetails = e.UpdateDetails;

        CheckingForUpdates = false;

        InvokeAsync(() => StateHasChanged());
    }

    private async Task DownloadUpdate()
    {
        UpdateDownloadFinished = false;
        UpdateProgress = 0f;

        UpdateInProgress = true;
        StateHasChanged();

        IProgress<float> progress = new Progress<float>(e => ReportProgress(e));

        await UpdateService.DownloadUpdate(UpdateDetails, progress);
        await Updater.Services.UpdateService.UnpackUpdate();

        UpdateInProgress = false;
        UpdateDownloadFinished = true;
        StateHasChanged();
    }

    private void ReportProgress(float value)
    {
        UpdateProgress = value * 100;
        StateHasChanged();
    }

    private void InstallUpdate()
    {
        string starterPath = "Starter.exe";
        System.Diagnostics.Process.Start(starterPath);
        Environment.Exit(0);
    }
}
